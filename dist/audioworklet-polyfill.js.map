{"version":3,"file":"audioworklet-polyfill.js","sources":["../src/realm.js","../src/index.js"],"sourcesContent":["/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nexport function Realm (scope, parentElement) {\n  const frame = document.createElement('iframe');\n  frame.style.cssText = 'position:absolute;left:0;top:-999px;width:1px;height:1px;';\n  parentElement.appendChild(frame);\n  const win = frame.contentWindow;\n  const doc = win.document;\n  let vars = 'var window,$hook';\n  for (const i in win) {\n    if (!(i in scope) && i !== 'eval') {\n      vars += ',';\n      vars += i;\n    }\n  }\n  for (const i in scope) {\n    vars += ',';\n    vars += i;\n    vars += '=self.';\n    vars += i;\n  }\n  const script = doc.createElement('script');\n  script.appendChild(doc.createTextNode(\n    `function $hook(self,console) {\"use strict\";\n        ${vars};return function() {return eval(arguments[0])}}`\n  ));\n  doc.body.appendChild(script);\n  this.exec = win.$hook.call(scope, scope, console);\n}\n","/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport { Realm } from './realm';\n\nconst PARAMS = [];\nlet nextPort;\n\nif (typeof AudioWorkletNode !== 'function' || !(\"audioWorklet\" in AudioContext.prototype)) {\n  self.AudioWorkletNode = function AudioWorkletNode (context, name, options) {\n    const processor = getProcessorsForContext(context)[name];\n    const outputChannels = options && options.outputChannelCount ? options.outputChannelCount[0] : 2;\n    const scriptProcessor = context.createScriptProcessor(undefined, 2, outputChannels);\n\n    scriptProcessor.parameters = new Map();\n    if (processor.properties) {\n      for (let i = 0; i < processor.properties.length; i++) {\n        const prop = processor.properties[i];\n        const node = context.createGain().gain;\n        node.value = prop.defaultValue;\n        // @TODO there's no good way to construct the proxy AudioParam here\n        scriptProcessor.parameters.set(prop.name, node);\n      }\n    }\n\n    const mc = new MessageChannel();\n    nextPort = mc.port2;\n    const inst = new processor.Processor(options || {});\n    nextPort = null;\n\n    scriptProcessor.port = mc.port1;\n    scriptProcessor.processor = processor;\n    scriptProcessor.instance = inst;\n    scriptProcessor.onaudioprocess = onAudioProcess;\n    return scriptProcessor;\n  };\n\n  Object.defineProperty((self.AudioContext || self.webkitAudioContext).prototype, 'audioWorklet', {\n    get () {\n      return this.$$audioWorklet || (this.$$audioWorklet = new self.AudioWorklet(this));\n    }\n  });\n\n  self.AudioWorklet = class AudioWorklet {\n    constructor (audioContext) {\n      this.$$context = audioContext;\n    }\n\n    addModule (url, options) {\n      return fetch(url).then(r => {\n        if (!r.ok) throw Error(r.status);\n        return r.text();\n      }).then(code => {\n        const context = {\n          sampleRate: this.$$context.sampleRate,\n          currentTime: this.$$context.currentTime,\n          AudioWorkletProcessor () {\n            this.port = nextPort;\n          },\n          registerProcessor: (name, Processor) => {\n            const processors = getProcessorsForContext(this.$$context);\n            processors[name] = {\n              realm,\n              context,\n              Processor,\n              properties: Processor.parameterDescriptors || []\n            };\n          }\n        };\n\n        context.self = context;\n        const realm = new Realm(context, document.documentElement);\n        realm.exec(((options && options.transpile) || String)(code));\n        return null;\n      });\n    }\n  };\n}\n\nfunction onAudioProcess (e) {\n  const parameters = {};\n  let index = -1;\n  this.parameters.forEach((value, key) => {\n    const arr = PARAMS[++index] || (PARAMS[index] = new Float32Array(this.bufferSize));\n    // @TODO proper values here if possible\n    arr.fill(value.value);\n    parameters[key] = arr;\n  });\n  this.processor.realm.exec(\n    'self.sampleRate=sampleRate=' + this.context.sampleRate + ';' +\n    'self.currentTime=currentTime=' + this.context.currentTime\n  );\n  const inputs = channelToArray(e.inputBuffer);\n  const outputs = channelToArray(e.outputBuffer);\n  this.instance.process([inputs], [outputs], parameters);\n\n  // @todo - keepalive\n  // let ret = this.instance.process([inputs], [outputs], parameters);\n  // if (ret === true) { }\n}\n\nfunction channelToArray (ch) {\n  const out = [];\n  for (let i = 0; i < ch.numberOfChannels; i++) {\n    out[i] = ch.getChannelData(i);\n  }\n  return out;\n}\n\nfunction getProcessorsForContext (audioContext) {\n  return audioContext.$$processors || (audioContext.$$processors = {});\n}\n"],"names":["Realm","scope","parentElement","frame","document","createElement","style","cssText","appendChild","win","contentWindow","doc","vars","i","script","createTextNode","body","this","exec","$hook","call","console","nextPort","PARAMS","onAudioProcess","e","parameters","index","forEach","value","key","arr","Float32Array","_this2","bufferSize","fill","processor","realm","context","sampleRate","currentTime","inputs","channelToArray","inputBuffer","outputs","outputBuffer","instance","process","ch","out","numberOfChannels","getChannelData","getProcessorsForContext","audioContext","$$processors","AudioWorkletNode","AudioContext","prototype","self","name","options","scriptProcessor","createScriptProcessor","undefined","outputChannelCount","Map","properties","length","prop","node","createGain","gain","defaultValue","set","mc","MessageChannel","port2","inst","Processor","port","port1","onaudioprocess","Object","defineProperty","webkitAudioContext","get","$$audioWorklet","AudioWorklet","$$context","addModule","url","fetch","then","r","ok","Error","status","text","code","_this","AudioWorkletProcessor","registerProcessor","parameterDescriptors","documentElement","transpile","String"],"mappings":"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"}